#The following Global Setting value must be set to the name of Network Offering to be used for creating a new Network when no Network has been selected while creating 
a Kubernetes cluster:
cloud.kubernetes.cluster.network.offering
A new Network offering named DefaultNetworkOfferingforKubernetesService has been added since 4.14.0

#Enable this configs on Cloudstack Configuration :
cloud.kubernetes.service.enabled
Cloud kubernetes cluster experimental features enabled

#Restart the main service:
service cloudstack-management restart

#On client machine used to manage the Kubernetes Cluster install go and kubectl:
dnf install go -y

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
cp kubectl /usr/bin/kubectl
chmod +x /usr/bin/kubectl

#CKS Kubernete iso Used, Add on Kubernetes ISOS:
https://download.cloudstack.org/cks/setup-1.28.4.iso
#Checksum of the iso:
b4dfb9d8be2191bc8bc4b89d78795a5b

#Create Computer Offering for Kubernete nodes.

#Create Kubernete Cluster on Cloudstack Web Interface / Compute / Kubernetes

#Download Kubernetes cluster config on Cloudstack Web Interface / Kubernetes / Your_Cluster_Kubernetes / Acess:

#Optional
#Kubernetes cluster web dashboard local Proxy
kubectl --kubeconfig /custom/path/kube.conf proxy

#Once Proxy running, you can acess it by url:
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/

#Create token for the proxy:

kubectl --kubeconfig /custom/path/kube.conf apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-dashboard-admin-user
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard-admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard-admin-user
  namespace: kubernetes-dashboard
---
apiVersion: v1
kind: Secret
type: kubernetes.io/service-account-token
metadata:
  name: kubernetes-dashboard-token
  namespace: kubernetes-dashboard
  annotations:
    kubernetes.io/service-account.name: kubernetes-dashboard-admin-user
EOF

#Retrieve token created:
 kubectl --kubeconfig kube.conf describe secret $(kubectl --kubeconfig kube.conf get secrets -n kubernetes-dashboard | grep kubernetes-dashboard-token | awk '{print $1}') -n kubernetes-dashboard

#Create the file "traefik-ingress-controller.yml" and add this content:

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  annotations:
    service.beta.kubernetes.io/cloudstack-load-balancer-proxy-protocol: enabled
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: https
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-conf
data:
  traefik.toml: |
    defaultEntryPoints = ["http"]
    [entryPoints]
      [entryPoints.http]
      address = ":80"
        [entryPoints.http.proxyProtocol]
        insecure = true
      [entryPoints.https]
      address = ":443"
        [entryPoints.https.proxyProtocol]
        insecure = true
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: traefik-ingress-controller
spec:
  selector:
    matchLabels:
      name: traefik-ingress-controller
  template:
    metadata:
      labels:
        name: traefik-ingress-controller
    spec:
      hostNetwork: true
      containers:
      - args:
        - --configfile=/config/traefik.toml
        image: traefik:1.7.12
        imagePullPolicy: Always
        name: traefik-ingress
        ports:
        - containerPort: 80
          hostPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          hostPort: 443
          name: https
          protocol: TCP
        volumeMounts:
        - mountPath: /config
          name: config
      volumes:
      - configMap:
          defaultMode: 420
          name: traefik-conf
        name: config

#Apply config:
kubectl --kubeconfig kube.conf apply -f traefik-ingress-controller.yml


#On successfully deploying the traefik yaml file, a new Public IP Address in the same Network as the cluster will be created. It will automatically have the firewall and port forwarding rules configured to distribute any traffic amongst the cluster worker nodes

List pods
kubectl --kubeconfig /custom/path/kube.conf get pods --all-namespaces
List nodes
kubectl --kubeconfig /custom/path/kube.conf get nodes --all-namespaces
List services
kubectl --kubeconfig /custom/path/kube.conf get services --all-namespaces
